[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SQL Primer for Data Analysts",
    "section": "",
    "text": "Preface\nI created this primer so you can quickly learn the basics of SQL in the context of performing data analysis. Here’s what I mean:\n\nAs a data analyst, you need to learn just part of SQL to do most of your work.\nAs much as possible, this primer teaches SQL as if you’re doing data analysis.\n\nThere’s much to know about SQL, but this primer is intentionally lean. It’s accelerated learning, focusing on what a data analysts needs to know.\nAfter completing this primer, you should be able to use SQL to retrieve and wrangle data. You’ll also be prepared to dive deeper into SQL when needed."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "part_get_started.html",
    "href": "part_get_started.html",
    "title": "Get Started",
    "section": "",
    "text": "Here’s what’s in Get Started:\n\nIntroduction\nCourse Roadmap"
  },
  {
    "objectID": "intro.html#prerequisites",
    "href": "intro.html#prerequisites",
    "title": "Introduction",
    "section": "Prerequisites",
    "text": "Prerequisites\nThis primer assumes:\n\nyou have no experience working with SQL or relational databases\nyou have at least novice-level skills coding either Python or R, ideally both"
  },
  {
    "objectID": "intro.html#learning-objectives",
    "href": "intro.html#learning-objectives",
    "title": "Introduction",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nAfter completing this primer, you should be able to:\n\nExplain basic concepts regarding the design and use of a relational database (db)\nDemonstrate intermediate-level skills for using SQL to select and wrangle data stored in a relational database\nUse command line and GUI applications to write standalone SQL and submit it a relational database management system (RDBMS)\nWrite R and Python scripts that contain embedded SQL\n\nThe premise that underlies the learning objectives for this primer is the data analysts mostly write SQL and submit it to a RDMBS in order to retrieve data and to wrangle data on the database server."
  },
  {
    "objectID": "intro.html#why-sql",
    "href": "intro.html#why-sql",
    "title": "Introduction",
    "section": "Why SQL?",
    "text": "Why SQL?\nWhy SQL? This is an easy question. The answer is because SQL is the programming language used to interact with relational databases.\nThe question should be, “Why relational databases?\nThe short answer is because most organizations have found relational databases to be the best way to store data.\nThe long answer has many parts. Below is a post from the Open Data Science Conference blog, but you can easily Google to find many other answers.\n\nUnit 1 will provide you with a primer about relational databases and the applications used to maintain named. These applications are called relational database management systems (RDMBS)."
  },
  {
    "objectID": "intro.html#sql-code-location",
    "href": "intro.html#sql-code-location",
    "title": "Introduction",
    "section": "SQL code location",
    "text": "SQL code location\nWhere to you write and run SQL?\nThis can be done two ways:\n\nStandalone SQL\nSQL can be written and submitted to the DBMS using a command-line interface or a GUI. Most people use a GUI. Writing standalone SQL is the way a lot of initial data analysis is done.\nStarting in Unit 3, you’ll use a database client GUI software application to connect to databases, write and submit SQL to the DBMS.\n\n\nEmbedded SQL\nSometimes doing analysis with standalone SQL is sufficient, but most data analysts need to eventually bring the initially wrangled data into a programming environment to use R or Python libraries for further analysis. So, SQL code is embedded into R or Python scripts.\n\n\n\n\n\n\nNote\n\n\n\nSQL runs in a RDBMS\nIt’s important to understand that when (for example) an R script contains SQL code that when the script runs the line of code that contains the SQL statement that the SQL statement is submitted to the database server pretty much just as if the SQL was being used standalone in a database client GUI. In brief, the database engine, which is part of the DBMS, doesn’t care if the SQL came from a GUI or was embedded in an R script.\n\n\nYou’ll get experience with embedding SQL in R and Python scripts later in this primer."
  },
  {
    "objectID": "course_outline.html",
    "href": "course_outline.html",
    "title": "Course Outline",
    "section": "",
    "text": "Add course outline"
  },
  {
    "objectID": "part_unit_1.html",
    "href": "part_unit_1.html",
    "title": "Unit 1",
    "section": "",
    "text": "Unit 1 gets you into using SQL right away.\nYou’ll start this primer using the W3Schools SQL tutorial online platform. This will allow you to write and run SQL without having to create a database or install any software."
  },
  {
    "objectID": "unit_1_lesson_1.html#learning-objectives",
    "href": "unit_1_lesson_1.html#learning-objectives",
    "title": "Lesson 1",
    "section": "Learning objectives",
    "text": "Learning objectives\nAfter this lesson, you should be able to:\n\nUse SQL to specify the table containing the data you need\nUse SQL to specify the column(s) containing the data you need\nUse * to select all columns\nExplain the purpose of SQL keywords and clauses\nUse W3Schools to write and run SQL"
  },
  {
    "objectID": "unit_1_lesson_1.html#w3schools",
    "href": "unit_1_lesson_1.html#w3schools",
    "title": "Lesson 1",
    "section": "W3Schools",
    "text": "W3Schools\nW3Schools provides an online SQL tutorial platform the allows you to write and run SQL against a sample database (db). This platform enables you to quickly get hands-on experience using SQL.\nGo to this W3Schools web page.\nThe Database section on the right lists the tables in the db.\n\n\n\n\n\n\n\nNote\n\n\n\nTable\nA database is made up of tables. How data appears in a spreadsheets or a dataframe is a good analogy for a db table."
  },
  {
    "objectID": "unit_1_lesson_1.html#select-specific-columns",
    "href": "unit_1_lesson_1.html#select-specific-columns",
    "title": "Lesson 1",
    "section": "Select specific columns",
    "text": "Select specific columns\nUse this W3Schools page\nEnter this SQL and click Run SQL\n\n\n\n\n\n\n\nNote\n\n\n\nFor brevity, in the future, I’ll just say “Run this SQL”.\n\n\nAfter you run the SQL, the W3Schools web page will show you the result set returned by the database engine when it ran your SQL.\n\n\n\n\n\n\nNote\n\n\n\nThroughout this primer, my screenshots of the result set usually only show the first few records. When you run the SQL, you can scroll through the result set to see all the records.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nRecall: we’re using W3Schools right now because I don’t want you to worry about creating a database to and installing database-related software on your computer. You’ll get a chance to do these things later in the primer. The focus now is for you to learn a few basics about SQL.\n\n\n\nSelect statement\nThe SQL you just ran is a select statement.\nSQL uses many type of statements, but the one most important for data analysis is the select statement.\nThings you can do with select include:\n\nFind facts (gain insights) about the data\nProfile (explore) the data\nPrepare (clean or transform) the data\n\nThe columns in the result set align to the columns listed after the SELECT keyword.\n\n\nKeywords\nUsually a select statement contains at least two keywords: SELECT and FROM. However, technically speaking, only the SELECT keyword is mandatory.\nUse this W3Schools page\nRun this SQL:\n\nResult set:\n\nDiscussion\nInstead of selecting data from a table, it selects data from the hard-coded character string.\n\n\n\n\n\n\nNote\n\n\n\nDon’t worry about the ugly “Expr1000” column heading. I’ll show you how to fix this later.\n\n\nOccasionally, you might want select from a literal, but practically speaking you’ll need both SELECT and FROM keywords in a select statement.\n\nSELECT identifies the columns you want to retrieve\nFROM identifies the table(s) you are select from\n\n\n\n\n\n\n\nNote\n\n\n\nTo keep things simple at the start of this primer, you’ll only select from a single table. Later, I’ll show you how to code selects where the data comes from multiple tables.\n\n\n\n\nClause\nThe word “clause” refers to a keyword and things you code right after it.\nThe statement, “SELECT CustomerName, Country FROM Customers;” contains two clauses.\nThe select clause: SELECT CustomerName, Country\nThe from clause: FROM Customers"
  },
  {
    "objectID": "unit_1_lesson_1.html#select-all-columns",
    "href": "unit_1_lesson_1.html#select-all-columns",
    "title": "Lesson 1",
    "section": "Select all columns",
    "text": "Select all columns\nRun this SQL:\n\nResult set:\n\nDiscussion\nCoding an asterisk following SELECT tells the database engine to retrieve all columns from the table."
  },
  {
    "objectID": "intro.html#primer-prerequisites",
    "href": "intro.html#primer-prerequisites",
    "title": "Introduction",
    "section": "Primer Prerequisites",
    "text": "Primer Prerequisites\nThis primer assumes:\n\nyou have no experience working with SQL or relational databases\nyou have at least novice-level skills coding either Python or R, ideally both"
  },
  {
    "objectID": "intro.html#primer-learning-objectives",
    "href": "intro.html#primer-learning-objectives",
    "title": "Introduction",
    "section": "Primer Learning Objectives",
    "text": "Primer Learning Objectives\nAfter completing this primer, you should be able to:\n\nExplain basic concepts regarding the design and use of a relational database (db)\nDemonstrate intermediate-level skills for using SQL to select and wrangle data stored in a relational database\nUse command line and GUI applications to write standalone SQL and submit it a relational database management system (RDBMS)\nWrite R and Python scripts that contain embedded SQL\n\nThe premise that underlies the learning objectives for this primer is the data analysts mostly write SQL and submit it to a RDMBS in order to retrieve data and to wrangle data on the database server."
  },
  {
    "objectID": "intro.html#chick-or-egg-problem",
    "href": "intro.html#chick-or-egg-problem",
    "title": "Introduction",
    "section": "Chick or Egg Problem",
    "text": "Chick or Egg Problem\nTeaching SQL presents a “chicken or egg problem”. Should you first teach about SQL or first teach about relational databases?\nActually, both need to be taught first, which is a tricky teaching task.\nBelow is a brief introduction the SQL and relational databases, including some about Relational Database Management Systems. In Unit 1, you’ll get hands-on experience and learn more about both."
  },
  {
    "objectID": "intro.html#relational-database-management-system",
    "href": "intro.html#relational-database-management-system",
    "title": "Introduction",
    "section": "Relational Database Management System",
    "text": "Relational Database Management System\nA relational database management system (RDBMS) is an application that creates, manages and provides data stored in the relational database. Two very popular opens source (and free) are MySQL and PostgreSQL. Oracle and Microsoft SQL Server are commercial examples used by many organization. A very hihgly used RDBMS is a tiny, limited function, but very powerful one named SQLite.\nRelational Database Management Systems (DBMS) are very specialized, optimized systems. This is the place where high-traffic, high-processing data processing workloads need to execute. Data wrangling starts on the database server and then smaller sets of data can be brought into (for example) an R environment for further analysis, visualization, or modeling. Using the RDMBS to perform some types of data wrangling is far more efficient than doing so on the computer where (for example) an R script is running.\nBottom line, professional data analysts need to know SQL. At least most aspects of SQL select statement."
  },
  {
    "objectID": "unit_1_lesson_2.html#learning-objectives",
    "href": "unit_1_lesson_2.html#learning-objectives",
    "title": "Lesson 2",
    "section": "Learning Objectives",
    "text": "Learning Objectives\nAfter this lesson, you should be able to:\n\nDescribe W3Schools tables\nExplain RDBMS basic concepts\nExplain how SQL interacts with a RDBMS"
  },
  {
    "objectID": "unit_1_lesson_2.html#w3schools-database",
    "href": "unit_1_lesson_2.html#w3schools-database",
    "title": "Lesson 2",
    "section": "W3Schools Database",
    "text": "W3Schools Database\nIn the prior lesson you saw this list of tables in the database (db) provided by the W3Schools website for learning SQL.\nThese tables are good for learning SQL because they contain a small number of rows. So, you can visually inspect them to verify the result sets.\nBest of all, you don’t need to do anything to use the database while you’re initially learning SQL.\nClick on each table. W3Schools will run a SELECT * query. Examine the columns and rows returned."
  },
  {
    "objectID": "unit_1_lesson_2.html#rdbms-in-a-nutshell",
    "href": "unit_1_lesson_2.html#rdbms-in-a-nutshell",
    "title": "Lesson 2",
    "section": "RDBMS in a nutshell",
    "text": "RDBMS in a nutshell\nThe essence of a relational database management system (RDMBS) is that data is organized into tables, each of which is akin to a spreadsheet or a dataframe. When you need data that’s present in multiple table, there’s a way to temporarily connect the tables together via SQL.\nClick on the Orders table, the web page will run a SELECT * query against that table. See that it contains the OrderID column. Next, click on the OrderDetails table. See that it also contains a column named OrderID. If you want to run select statement that gets data from both tables then you use the JOIN keyword to temporarily merge these tables together. We’ll discuss doing joins later.\n\n\n\n\n\n\nNote\n\n\n\nHistory and terminology\nThe relational data model is the only way to organize and store data in a database. IBM had previously successfully marketed a database management system (DBMS) named IMS that was based on storing data in a hierarchical (tree-like) structure.\nDr. E.F. Codd published a paper in 1970 that described the mathematical concepts that underpin relational databases. IBM and Oracle used Codd’s ideas to build and market relational database management systems (RDBMS). Other companies soon did the same.\n\nArcane terminology you probably won’t use but might see:\nA db table is technically called a “relation”.\nA db column is sometimes call an “attribute”, but technically (and rarely) called a “tuple”.\n\nNote only are tables call “relations”, but they also relate to each other based on common columns. This is why later in this primer, you’ll learn the importance of select from multiple (temporarily joined) tables to access data that’s spread across multiple table.\nWant more now? If so, click on this link."
  },
  {
    "objectID": "unit_1_lesson_2.html#introduction",
    "href": "unit_1_lesson_2.html#introduction",
    "title": "Lesson 2",
    "section": "Introduction",
    "text": "Introduction\nIn the prior lesson, you got a small taste of SQL by writing it and see the results.\nYou wont’ be writing any SQL in this lesson. Instead, before going deeper into SQL, it’s important that you learn some basics about relational databases.\nIn this lesson, you’ll get:\n\nmore information about the W3Schools database and why it’s used initially in this primer\na further introduction into what’s a RDBMS\nconcepts about how SQL and an RDBMS work together"
  },
  {
    "objectID": "unit_1_lesson_2.html#sql-and-rdbms",
    "href": "unit_1_lesson_2.html#sql-and-rdbms",
    "title": "Lesson 2",
    "section": "SQL and RDBMS",
    "text": "SQL and RDBMS\n\n\n\n\n\n\nNote\n\n\n\nI recommend that you read through all of this SQL and RDBMS section and then go back and read through it again.\n\n\nConsider this model. It’s high level and not technically 100% accurate/complete, but it conveys essential concepts about how SQL interacts with an RDBMS.\n\n\n#1 Database client\nGenerally speaking, there are two parts of the database client.\nThe first part is the place where SQL source code exists. This part can be in a GUI that’s designed to be an editor where you write the SQL and click a Run SQL type of button. The W3Schools page is giving you this GUI. You’ll see other options for this part later in this primer.\nThe second part of the database client is usually some kind of a library that contains the functionality for implementing an interface to the database engine (see below).\nIn short, the db client gives you a place for the SQL code and way to submit it to the db engine via the database interface library.\nThere’s another aspect (like the flip side) of the database client, which is the part of the database interface that receives the result set returned by the database engine. What you see in the Result Set part of the W3Schools page is the “flip side” of the client.\n\n\n#2 Database engine\nThe database engine is a primary component of the RDBMS application. Often the term “db engine” is used interchangeable with “RDMBS”. There are other components of the RDBMS, but you, as the data analyst, don’t usually need to think about them. It’s fine if you use the phrase, “my SQL is parses by the db engine so the engine can create an access plan for how to read the database to get the data I need.”\nThe db engine receives data that is physically read from the database and constructs the result set. The result set is then returned to the database interface (dbi), which ultimately returns it the part of the database client where it can be displayed in a result set window in a GUI (or placed into a dataframe if the db client is (for example) a Python program that has embedded SQL.\n\n\n#3 Data Access Plan\nAfter the db engine parses the SQL then it dynamically creates a program (written in a lower-level language) for how to physically read/write the database file. This program is called the database access plan.\n\n\n#4 Database\nThis cylinder symbol represents the database. The square contained within it represent tables in the db.\nKeep in mind that physically the database is a file stored on your file system. Actually, in most relational database management systems, there are several files that contain different parts of the database, index file, data files, etc. The good news is that the RDMBS manages all physical reads/writes with these files so you, as a data analyst don’t typically have to think about the physical files that makeup the database.\n\n\n#5 RDBMS\nThe database engine as well as other components not shown in the above model along with the files that makeup database."
  },
  {
    "objectID": "unit_1_lesson_3.html#learning-objectives",
    "href": "unit_1_lesson_3.html#learning-objectives",
    "title": "Lesson 3",
    "section": "Learning objectives",
    "text": "Learning objectives\nAfter this lesson, you should be able to:\n\nExplain single and multiple-level sorts\nExplain sort order\nWrite SQL to perform simple and complex sorts"
  },
  {
    "objectID": "unit_1_lesson_3.html#order-by-clause",
    "href": "unit_1_lesson_3.html#order-by-clause",
    "title": "Lesson 3",
    "section": "ORDER BY clause",
    "text": "ORDER BY clause\nUse this W3Schools page.\nRun this SQL:\n\nResult set:\n\nThe database engine does not guarantee how rows in the result set will be ordered. You can guarantee the order by coding an order by clause.\nThe first column name coded after the ORDER BY keywords specifies the first-level ordering and the second column specifies the second-level ordering.\n\n\n\n\n\n\nNote\n\n\n\nWhen talking about the above SQL, you’d say, “I’m ordering first on Country and then within each Country, I’m ordering by City.” Actually, in a real-world conversation, you’d shorten it to, “I’m ordering by Country and City.”.\nSince ascending ordering is the default behavior of the order by clause, you’d wouldn’t say “I am ordering ascending”. Instead, you’d only say I’m order descending only if you had coded DESC”.\nThere’s no strict limit to the number of ordering levels allowed, but for readability and performance reasons, typically you won’t order by more than three levels."
  },
  {
    "objectID": "course_roadmap.html",
    "href": "course_roadmap.html",
    "title": "Course Outline",
    "section": "",
    "text": "Add course outline"
  },
  {
    "objectID": "course_roadmap.html#section-1-week-1",
    "href": "course_roadmap.html#section-1-week-1",
    "title": "Course Roadmap",
    "section": "Section 1 (Week 1)",
    "text": "Section 1 (Week 1)\n\nUnits 1 and 2\nUse the W3School online SQL platform to dive in quickly\nBasic SQL syntax and functionality for the select statement\nEssential concepts about relational database management systems (DBMS)"
  },
  {
    "objectID": "course_roadmap.html#section-2-week-2",
    "href": "course_roadmap.html#section-2-week-2",
    "title": "Course Roadmap",
    "section": "Section 2 (Week 2)",
    "text": "Section 2 (Week 2)\n\nUnit 3\nInstall the SQLite DBMS\nUse the sqlite3 command line interface (CLI)\n\n\nUnit 4\nInstall DB Browser\nUse the DB Browser graphical user interface (GUI)\nIn both units 3 and 4:\n\nLearn more about SQL select features\nApply SQL to EDA, data cleaning and transformation"
  },
  {
    "objectID": "course_roadmap.html#section-3-week-3",
    "href": "course_roadmap.html#section-3-week-3",
    "title": "Course Roadmap",
    "section": "Section 3 (Week 3)",
    "text": "Section 3 (Week 3)\n\nUnit 5\nUse SQL in R\n\n\nUnit 6\nUse SQL in Python\nIn both units 5 and 6:\n\nContinue developing intermediate-level SQL skills\nCombine SQL with R/Python to perform professional-level data analysis"
  },
  {
    "objectID": "course_roadmap.html#section-4-week-4",
    "href": "course_roadmap.html#section-4-week-4",
    "title": "Course Roadmap",
    "section": "Section 4 (Week 4)",
    "text": "Section 4 (Week 4)\n\nUnit 7\nData analysis project assignment\n\n\nUnit 8\nPostgreSQL\n\nInstall and run a PostgreSQL server\nInstall pgAdmin (GUI to run standalone SQL)\n\nReference examples:\n\nUse PostgreSQL in an R script\nUse PostgreSQL in a Python script\n\nThis unit is a tutorial. Hands-on activities are optional."
  },
  {
    "objectID": "unit_1_lesson_4.html#learning-objectives",
    "href": "unit_1_lesson_4.html#learning-objectives",
    "title": "Lesson 4",
    "section": "Learning objectives",
    "text": "Learning objectives\nAfter this lesson, you should be able to:\n\nExplain how SQL functions work\nUse SQL functions\nWrite readable SQL code"
  },
  {
    "objectID": "unit_1_lesson_4.html#sql-functions",
    "href": "unit_1_lesson_4.html#sql-functions",
    "title": "Lesson 4",
    "section": "SQL functions",
    "text": "SQL functions\n\nSUBSTRING\n\n\nUPPER\nUse this W3School page.\nRun this SQL:\n\nResult set:\n\nThe result set contains one row that corresponds to each row in the Customers table.\nThe result set contains three columns. SQL built-in functions were used when creating the second and third columns. The SQL SUBSTRING and UPPER functions work like similar functions you’ve likely seen in other programming languages.\n\n\n\n\n\n\nNote\n\n\n\nIf functions are new to you or if you need a fresher, here’s a quick description.\nMost SQL functions you’ll use are built-in, i.e. they’re always are available.\nYou use the function by coding it’s name followed by arguments enclosed in parenthesis. Sometimes you’ll hear people say, “call” or “invoke” instead of “use”.\nThe values in the arguments are passed into the function when you call it. These values are used by the function’s code. The first argument is typically the name of column that you want the function to act on and the others provide details that direct the function’s behavior, i.e. what you want it to do with or to the values in the column.\nIn the above SQL, the call to SUBSTRING requires arguments so the function will know know where to start and end the sub stringing. The UPPER function only needs the first argument since it will always upper case the entire string.\n\n\nSee the above SQL specifies the alias “PostalCode3” for the second column. I coded this alias so that anyone looking at the result set might assume this column contains three characters from the PostalCode column of the Customers table.\n\n\n\n\n\n\nNote\n\n\n\nSee in the above result set the second row for Austria has a 3-position postal code of 801. This row comes after the Austria row where the postal code is 501. It appears the result set is ordered first by country and then by postal code, but the order by clause only contains Country. The 801 row coming after the 501 row is by chance. If you wanted this order to always happen you’d need to code the order by clause accordingly."
  },
  {
    "objectID": "unit_1_lesson_4.html#readable-code",
    "href": "unit_1_lesson_4.html#readable-code",
    "title": "Lesson 4",
    "section": "Readable code",
    "text": "Readable code\nSQL select statements can become large and complex. This can make readability and therefore, maintainability difficult.\nThe above SQL contains several clauses and is beginning to get a little complex.\nIt’s good coding style to spread a complex SQL statement across several lines. Pretty much where you breakup the statement doesn’t matter to the db engine, including how you choose to indent. It’s largely a matter of personal preference. If you work in an organization you will probably be expected to comply with its coding standards."
  },
  {
    "objectID": "part_unit_2.html",
    "href": "part_unit_2.html",
    "title": "Unit 2",
    "section": "",
    "text": "You’re already getting skilled at using SQL for data analysis, but you’re sill missing one important feature. Some people would say in the most important feature. Here’s why.\nThe essence of a relational database is that data is spread across multiple tables. Some tables contain the same (key) columns. Having these common columns in multiple tables allows the db engine to temporarily join tables together so that a select statement can retrieve data from multiple tables.\nMastering the join clause is an essential SQL skill for data analysts.\nYou’ll gain foundation knowledge about joins and related topics such as sub queries and common table expressions in this unit."
  },
  {
    "objectID": "unit_2_lesson_5.html#learning-objectives",
    "href": "unit_2_lesson_5.html#learning-objectives",
    "title": "Lesson 5",
    "section": "Learning objectives",
    "text": "Learning objectives\nAfter this lesson, you should be able to:\n\nApply basic SQL skills to discover insights\nWrite SQL in the context of data analysis goals\nUse special-purpose SQL features\nExplain ANSI standards"
  },
  {
    "objectID": "unit_2_lesson_5.html#customers-by-country",
    "href": "unit_2_lesson_5.html#customers-by-country",
    "title": "Lesson 5",
    "section": "Customers by country",
    "text": "Customers by country\nGoal: Find how many customers are in each country.\nUse this W3Schools page.\nRun this SQL:\n\nResult set:"
  },
  {
    "objectID": "unit_2_lesson_5.html#top-5-countries",
    "href": "unit_2_lesson_5.html#top-5-countries",
    "title": "Lesson 5",
    "section": "Top 5 countries",
    "text": "Top 5 countries\nSome data analysis activities are so frequently done that special-purpose “convenience” features have been built into SQL. An example is the TOP clause that’s used to specify how many rows the db engine should return in the result set.\nGoal: Find the five countries with the most customers.\nUse this W3Schools page.\nRun this SQL:\n\nResult set: (See there are only 5 records because of the TOP 5 in the SQL.)\n\n\n\n\n\n\n\nNote\n\n\n\nMost SQL that you’ll see in this primer is used the same way in all RDBMS applications. This is because an organization named “American National Standards Institute (ANSI)” has defined a standardized syntax and behavior for SQL. Most RDBMS applications comply with ANSI standards. Some SQL is not in scope of the ANSI standards. For example the TOP clause used above is called the LIMIT clause by the MySQL RDBMS. Both TOP and LIMIT work pretty much the same. Check the documentation for your specific RDBMS for details when needed."
  },
  {
    "objectID": "unit_1_lesson_5.html#learning-objectives",
    "href": "unit_1_lesson_5.html#learning-objectives",
    "title": "Lesson 5",
    "section": "Learning objectives",
    "text": "Learning objectives\nAfter this lesson, you should be able to:\n\nApply basic SQL skills to discover insights\nWrite SQL in the context of data analysis goals\nUse special-purpose SQL features\nExplain ANSI standards"
  },
  {
    "objectID": "unit_1_lesson_5.html#customers-by-country",
    "href": "unit_1_lesson_5.html#customers-by-country",
    "title": "Lesson 5",
    "section": "Customers by country",
    "text": "Customers by country\nUse this W3Schools page.\nRun this SQL:\n\nResult set:\n\n\nDiscussion\nThe above SQL provides insight from your data. Specifically, you’re finding out how your customers are distributed across the countries where the company does business.\nCOUNT is an example of an aggregate function. You’ll use many aggregate functions when coding SQL. In short, an aggregate function first works with multiple rows and then does something to “aggregate” information from those rows into a single value.\nAnother interesting aspect of the above SQL is that it performs implicit grouping. Since Country was passed as an argument in the call to the COUNT functioin, the db engine selects all of the rows and then forms a group for each country. Next it counts how many customer are in group to determine the values seen in the CustomerCount column of the result set.\n\n\n\n\n\n\nNote\n\n\n\nBe aware the above description of what the db engine does is a “logical” description. Physically what the db engine does when reading the database and forming the result set can be different based on the optimization logic and other factors specific to the RDBMS."
  },
  {
    "objectID": "unit_1_lesson_5.html#top-5-countries",
    "href": "unit_1_lesson_5.html#top-5-countries",
    "title": "Lesson 5",
    "section": "Top 5 countries",
    "text": "Top 5 countries\nSome data analysis activities are so frequently done that special-purpose “convenience” features have been built into SQL. An example is the TOP clause that’s used to specify how many rows the db engine should return in the result set.\nUse this W3Schools page.\nRun this SQL:\n\nResult set:\n\n\nDiscussion\nThere are only 5 records because of the TOP 5 coded in the SQL.\n\n\n\n\n\n\nNote\n\n\n\nMost SQL that you’ll see in this primer is used the same way in all RDBMS applications. This is because an organization named “American National Standards Institute (ANSI)” has defined a standardized syntax and behavior for SQL. Most RDBMS applications comply with ANSI standards. Some SQL is not in scope of the ANSI standards. For example the TOP clause used above is called the LIMIT clause by the MySQL RDBMS. Both TOP and LIMIT work pretty much the same. Check the documentation for your specific RDBMS for details when needed."
  },
  {
    "objectID": "unit_2_lesson_9.html",
    "href": "unit_2_lesson_9.html",
    "title": "Unit 4, Lesson 1",
    "section": "",
    "text": "This is a second line."
  },
  {
    "objectID": "unit_1_lesson_5.html#distinct-countries",
    "href": "unit_1_lesson_5.html#distinct-countries",
    "title": "Lesson 5",
    "section": "Distinct countries",
    "text": "Distinct countries\nPerhaps you don’t need to know how many customers are in each country, but you’d simply like a list of the countries where your business conducts business. For further insight, you’ll also like that list to specify each country and the cities within each country.\nUse this W3Schools page.\nRun this SQL:\n\nResult set:\n\n\nDiscussion\nIt’s easy to incorrectly think that DISTINCT is a function. It’s not. An important clue is that Country and City are not enclosed in parentheses.\nSpecifically, you might think DISTINCT an aggregate function. Again, DISTINCT is not a function. Like TOP, DISTINCT is also a SQL keyword. In short, it’s another SQL convenience feature.\nWhen the db engine sees DISTINCT it will create one row in the result set for each Country and City combination in the Customers table.\nAlso, see in the result set the rows are ordered as specified in the order by clause."
  },
  {
    "objectID": "unit_1_lesson_6.html#learning-objectives",
    "href": "unit_1_lesson_6.html#learning-objectives",
    "title": "Lesson 6",
    "section": "Learning objectives",
    "text": "Learning objectives\nAfter this lesson, you should be able to:\n\nSpecify the rows you want to retrieve from a table\nExplain using a logical expression in a where clause\nExplain how case sensitivity applies to SQL"
  },
  {
    "objectID": "unit_1_lesson_6.html#where-clause",
    "href": "unit_1_lesson_6.html#where-clause",
    "title": "Lesson 6",
    "section": "where clause",
    "text": "where clause\nUse this W3Schools page.\nSuppose you need to find all of your customers located in Berlin.\nRun this SQL:\n\nResult set:\n\n\nDiscussion\nThe select statement contains the WHERE keyword, which is one way to constrain how many rows are in the result set.\nThe result set contains one row because the Customers table contains just one row where the value of City is “Berlin”.\nSee also the results set contains three columns that appear in the same order the columns are listed after the SELECT keyword.\n\n\n\n\n\n\nNote\n\n\n\nBe careful about designing your select statement to build a sufficiently granular where clause. It didn’t happen because of data in the Customers table. Using the above SQL, you could have also selected rows for customers who live line in one of the many U.S. cities named Berlin.\n\n\n\n\nlogical expression\nThe fundamental part of the where clause is the logical expression that follows the WHERE keyword.\n\n\n\n\n\n\nNote\n\n\n\nlogical expression\nRecall a logical expression always resolves to true or false.\n\n\nThe db engine accesses each row in the table and substitutes values present in that row into the logical expression that follows the WHERE keyword. The db engine then evaluates the expression. If it resolves to TRUE data from that row is used for further processing by the db engine, otherwise that row is ignored.\n\n\n\n\n\n\nNote\n\n\n\nSee how in the preceding paragraph, I said “data from that row is used for further processing by the db engine”. I purposely did not say “data from that row is put into the result set”. Typically it is, but depending on other parts of the select statement, the data from that “true” row may be used by the db engine for other processing but still data from that “true” row might not appear in the result set. This is a somewhat complex point that will be demonstrated later in this primer.\n\n\n\n\nCase sensitivity\nSQL is not case sensitive except for when you code character literals. For example, the where clause in the above SQL contains the character string “Berlin”. Here case sensitivity is important because “Berlin” is how the city is spelled in the City column of the database."
  },
  {
    "objectID": "unit_1_lesson_6.html#case-sensitivity",
    "href": "unit_1_lesson_6.html#case-sensitivity",
    "title": "Lesson 6",
    "section": "Case sensitivity",
    "text": "Case sensitivity\nSQL is not case sensitive except for when you code character literals. For example, the where clause in the above SQL contains the character string “Berlin”. Here case sensitivity is important because “Berlin” is how the city is spelled in the City column of the database."
  },
  {
    "objectID": "unit_1_lesson_6.html#complex-logical-expression",
    "href": "unit_1_lesson_6.html#complex-logical-expression",
    "title": "Lesson 6",
    "section": "Complex logical expression",
    "text": "Complex logical expression\nThe next two SQL examples show how a logical expression can be complex to allow for fine selection of row(s). Even it’s complex, a valid logical expression will ultimately resolve to true or false.\nIn both of these examples, the goal is to get a count of customers in Brazil and Portugal. A business data analysis context might be the human resources department needs the counts to determine how customer service representatives to hire who speak Portuguese.\n\nOR operator\nUse this W3Schools page.\nRun this SQL:\n\nResult set:\n\n\n\nIN operator\nUse this W3Schools page.\nRun this SQL:\n\nResult set:\n\n\n\nDiscussion\nExamine the two preceding SQL statements and see the OR and IN operators produce the same results. Most people would say the IN operator makes the code more readable."
  },
  {
    "objectID": "part_unit_1.html#w3schools---quick-start",
    "href": "part_unit_1.html#w3schools---quick-start",
    "title": "Unit 1",
    "section": "W3Schools - quick start",
    "text": "W3Schools - quick start\nUnit 1 gets you into using SQL right away.\nYou’ll start this primer using the W3Schools SQL tutorial online platform. This will allow you to write and run SQL without having to create a database or install any software."
  },
  {
    "objectID": "part_unit_1.html#functions",
    "href": "part_unit_1.html#functions",
    "title": "Unit 1",
    "section": "Functions",
    "text": "Functions\nSQL is a declarative programming language. It contains many built-in functions. You code calls to these functions to essentially “declare” what you what the db engine to do for you. You’ll get a start using functions in this unit."
  },
  {
    "objectID": "part_unit_1.html#goal-oriented-sql",
    "href": "part_unit_1.html#goal-oriented-sql",
    "title": "Unit 1",
    "section": "Goal-oriented SQL",
    "text": "Goal-oriented SQL\nAs you progress through this unit, you’ll find that even with a few SQL skills you can start using SQL as a tool for data analysis.\nAs you’ll see in later lessons in this unit, when you write SQL, start by trying to verbalize a goal in the context of doing data analysis. Taking this goal-oriented approach will help you to design your SQL statement. Your goals for using SQL could include:\n\nGetting to know your data (profiling)\nDiscovering facts contained in your data (insights)\nCleaning or transforming your data for further analysis (preparing)"
  },
  {
    "objectID": "part_unit_1.html#where-clause",
    "href": "part_unit_1.html#where-clause",
    "title": "Unit 1",
    "section": "WHERE clause",
    "text": "WHERE clause\nThe last lesson hits on the important “where clause” that’s seen in most select statements. This clause allows you to specify which rows to select for processing.\nData analysts working in large organizations often work with db tables containing a huge number of rows. Selecting all rows is usually undesirable for many reasons, including:\n\nNetwork traffic costs\nRun-time performance\nLocal programming environment constraints\nSecurity and privacy concerns"
  },
  {
    "objectID": "unit_2_lesson_7.html",
    "href": "unit_2_lesson_7.html",
    "title": "Lesson 7",
    "section": "",
    "text": "This is a second line."
  },
  {
    "objectID": "part_unit_2.html#w3schools",
    "href": "part_unit_2.html#w3schools",
    "title": "Unit 2",
    "section": "W3Schools",
    "text": "W3Schools\nFor Unit 2, You’ll still use the W3Schools online platform in order to continue with an accelerated introduction to SQL.\nIn the next unit, you’ll set up a local SQL development environment on your computer."
  },
  {
    "objectID": "part_unit_2.html#joining-tables",
    "href": "part_unit_2.html#joining-tables",
    "title": "Unit 2",
    "section": "Joining tables",
    "text": "Joining tables\nYou’ve developed novice skill in SQL for data analysis, but you’re sill missing joins. Some people would say this is the most important SQL feature. Here’s why.\nThe essence of a relational database is that data is spread across multiple tables. Some tables contain the same (key) columns. Having these common columns in multiple tables allows the db engine to temporarily join tables together so that a select statement can retrieve data from multiple tables.\nMastering the join clause is an essential SQL skill for data analysts.\nYou’ll gain foundation knowledge about joins and related topics such as sub queries and common table expressions in this unit."
  },
  {
    "objectID": "unit_2_lesson_7.html#learning-objectives",
    "href": "unit_2_lesson_7.html#learning-objectives",
    "title": "Lesson 7",
    "section": "Learning objectives",
    "text": "Learning objectives\nAfter this lesson, you should be able to:\n\nSpecify the rows you want to retrieve from a table\nExplain using a logical expression in a where clause\nExplain how case sensitivity applies to SQL"
  },
  {
    "objectID": "unit_2_lesson_7.html#inner-join",
    "href": "unit_2_lesson_7.html#inner-join",
    "title": "Lesson 7",
    "section": "Inner join",
    "text": "Inner join\nUse this W3Schools page.\nSuppose you need to find all of your customers located in Berlin.\nRun this SQL:\n\nResult set:"
  }
]